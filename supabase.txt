CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text NOT NULL,
  name text NULL,
  role text NULL,
  adviser_id uuid NULL,
  agent_type text NULL DEFAULT 'default'::text,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_email_key UNIQUE (email),
  CONSTRAINT profiles_adviser_id_fkey FOREIGN KEY (adviser_id) REFERENCES profiles(id) ON DELETE SET NULL,
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE,
  CONSTRAINT profiles_role_check CHECK ((role = ANY (ARRAY['adviser'::text, 'client'::text])))
);

CREATE TABLE public.clients (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  name text NOT NULL,
  email text NOT NULL,
  adviser_id uuid NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT clients_pkey PRIMARY KEY (id),
  CONSTRAINT clients_email_key UNIQUE (email),
  CONSTRAINT clients_adviser_id_fkey FOREIGN KEY (adviser_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.documents (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  file_name text NOT NULL,
  file_type text NULL,
  file_path text NULL,
  document_type text NULL,
  uploaded_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT documents_pkey PRIMARY KEY (id),
  CONSTRAINT documents_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.analyses (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  user_id uuid NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  filename text NULL,
  report_hash text NULL,
  metrics jsonb NULL,
  CONSTRAINT analyses_pkey PRIMARY KEY (id),
  CONSTRAINT analyses_user_id_fkey FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.assets (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  name text NULL,
  type text NULL,
  value numeric NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT assets_pkey PRIMARY KEY (id),
  CONSTRAINT assets_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.client_data (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  income numeric NULL,
  expenses numeric NULL,
  assets numeric NULL,
  liabilities numeric NULL,
  goals text NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT client_data_pkey PRIMARY KEY (id),
  CONSTRAINT client_data_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.expenditures (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  category text NULL,
  amount numeric NULL,
  frequency text NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT expenditures_pkey PRIMARY KEY (id),
  CONSTRAINT expenditures_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE,
  CONSTRAINT expenditures_frequency_check CHECK ((frequency = ANY (ARRAY['Monthly'::text, 'Annual'::text])))
);

CREATE TABLE public.goals (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  goal text NULL,
  target_amount numeric NULL,
  time_horizon integer NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT goals_pkey PRIMARY KEY (id),
  CONSTRAINT goals_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE TABLE public.incomes (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  source text NULL,
  amount numeric NULL,
  frequency text NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT incomes_pkey PRIMARY KEY (id),
  CONSTRAINT incomes_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE,
  CONSTRAINT incomes_frequency_check CHECK ((frequency = ANY (ARRAY['Monthly'::text, 'Annual'::text])))
);

CREATE TABLE public.liabilities (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  client_id uuid NULL,
  name text NULL,
  amount numeric NULL,
  interest_rate numeric NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT liabilities_pkey PRIMARY KEY (id),
  CONSTRAINT liabilities_client_id_fkey FOREIGN KEY (client_id) REFERENCES profiles(id) ON DELETE CASCADE
);





CREATE POLICY "Advisers can view their clients' profiles" ON public.clients
FOR SELECT
TO authenticated
USING (adviser_id = auth.uid());

CREATE POLICY "Users can view their own profile" ON public.profiles
FOR SELECT
TO authenticated
USING (auth.uid() = id);

CREATE POLICY "Advisers can view their clients' financial data" ON public.client_data
FOR SELECT
TO authenticated
USING (client_id IN (SELECT profiles.id FROM profiles WHERE (profiles.adviser_id = auth.uid())));

CREATE POLICY "Users can view their own financial data" ON public.client_data
FOR SELECT
TO authenticated
USING (auth.uid() = client_id);

CREATE POLICY "Users can upload their own documents" ON public.documents
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = client_id);

CREATE POLICY "Advisers can view their clients' documents" ON public.documents
FOR SELECT
TO authenticated
USING (auth.uid() IN (SELECT profiles.adviser_id FROM profiles WHERE (documents.client_id = profiles.id)));

CREATE POLICY "Users can view their own documents" ON public.documents
FOR SELECT
TO authenticated
USING (auth.uid() = client_id);

CREATE POLICY "Users can create their own analyses" ON public.analyses
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view their own analyses" ON public.analyses
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);





CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, email, name, role)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'role');
  RETURN new;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.update_timestamp()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;